"use client"

import type React from "react"
import { createContext, useContext, useEffect, useState } from "react"
import type { User as SupabaseUser } from "@supabase/supabase-js"
import { createClient } from "@/lib/supabase/client"
import type { User } from "@/types/database"

interface AuthContextType {
  user: SupabaseUser | null
  profile: User | null
  loading: boolean
  signIn: (email: string, password: string) => Promise<any>
  signUp: (email: string, password: string, username: string, fullName: string) => Promise<any>
  signOut: () => Promise<void>
  updateProfile: (updates: Partial<User>) => Promise<void>
}

// Create a default context value to avoid null checks
const defaultContextValue: AuthContextType = {
  user: null,
  profile: null,
  loading: true,
  signIn: async () => ({ error: new Error("Auth context not initialized") }),
  signUp: async () => ({ error: new Error("Auth context not initialized") }),
  signOut: async () => {},
  updateProfile: async () => {},
}

const AuthContext = createContext<AuthContextType>(defaultContextValue)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<SupabaseUser | null>(null)
  const [profile, setProfile] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<Error | null>(null)

  useEffect(() => {
    // Get initial session
    const getInitialSession = async () => {
      try {
        const supabase = createClient()
        const {
          data: { session },
          error: sessionError,
        } = await supabase.auth.getSession()

        if (sessionError) {
          console.error("Error getting session:", sessionError)
          setError(sessionError)
          setLoading(false)
          return
        }

        setUser(session?.user ?? null)

        if (session?.user) {
          await fetchProfile(session.user.id)
        }
      } catch (err) {
        console.error("Error in getInitialSession:", err)
        setError(err instanceof Error ? err : new Error(String(err)))
      } finally {
        setLoading(false)
      }
    }

    getInitialSession()

    // Listen for auth changes
    let subscription: { unsubscribe: () => void } | null = null

    try {
      const supabase = createClient()
      const { data } = supabase.auth.onAuthStateChange(async (event, session) => {
        setUser(session?.user ?? null)

        if (session?.user) {
          await fetchProfile(session.user.id)
        } else {
          setProfile(null)
        }

        setLoading(false)
      })

      subscription = data.subscription
    } catch (err) {
      console.error("Error setting up auth subscription:", err)
      setError(err instanceof Error ? err : new Error(String(err)))
      setLoading(false)
    }

    return () => {
      if (subscription) subscription.unsubscribe()
    }
  }, [])

  const fetchProfile = async (authUserId: string) => {
    try {
      const supabase = createClient()
      const { data, error } = await supabase.from("users").select("*").eq("auth_user_id", authUserId).single()

      if (error) {
        console.error("Error fetching profile:", error)
        return
      }

      setProfile(data)
    } catch (error) {
      console.error("Error in fetchProfile:", error)
    }
  }

  const signIn = async (email: string, password: string) => {
    try {
      const supabase = createClient()
      return await supabase.auth.signInWithPassword({
        email,
        password,
      })
    } catch (err) {
      console.error("Error in signIn:", err)
      return { data: null, error: err instanceof Error ? err : new Error(String(err)) }
    }
  }

  const signUp = async (email: string, password: string, username: string, fullName: string) => {
    try {
      const supabase = createClient()
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
      })

      if (data.user && !error) {
        // Create user profile in our custom users table
        const { error: profileError } = await supabase.from("users").insert({
          auth_user_id: data.user.id,
          username,
          full_name: fullName,
          tier: "street_rep",
          level: 1,
          points: 0,
          // erigma_id will be auto-generated by the trigger
        })

        if (profileError) {
          console.error("Error creating profile:", profileError)
        }
      }

      return { data, error }
    } catch (err) {
      console.error("Error in signUp:", err)
      return { data: null, error: err instanceof Error ? err : new Error(String(err)) }
    }
  }

  const signOut = async () => {
    try {
      const supabase = createClient()
      await supabase.auth.signOut()
      setUser(null)
      setProfile(null)
    } catch (err) {
      console.error("Error in signOut:", err)
    }
  }

  const updateProfile = async (updates: Partial<User>) => {
    if (!user) return

    try {
      const supabase = createClient()
      const { error } = await supabase.from("users").update(updates).eq("auth_user_id", user.id)

      if (error) {
        console.error("Error updating profile:", error)
        return
      }

      setProfile((prev) => (prev ? { ...prev, ...updates } : null))
    } catch (err) {
      console.error("Error in updateProfile:", err)
    }
  }

  return (
    <AuthContext.Provider
      value={{
        user,
        profile,
        loading,
        signIn,
        signUp,
        signOut,
        updateProfile,
      }}
    >
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  return useContext(AuthContext)
}
