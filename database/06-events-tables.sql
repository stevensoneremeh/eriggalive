-- Enhanced events with comprehensive features
CREATE TABLE IF NOT EXISTS public.events (
    id bigint primary key generated always as identity,
    title text not null,
    slug text unique not null,
    description text,
    short_description text,
    venue text not null,
    address text not null,
    city text not null,
    state text not null,
    country text default 'Nigeria',
    coordinates point,
    date timestamp with time zone not null,
    end_date timestamp with time zone,
    doors_open timestamp with time zone,
    ticket_price decimal(10,2) not null check (ticket_price >= 0),
    vip_price decimal(10,2) check (vip_price >= ticket_price),
    max_tickets integer not null check (max_tickets > 0),
    max_vip_tickets integer default 0 check (max_vip_tickets >= 0),
    tickets_sold integer default 0 check (tickets_sold >= 0),
    vip_tickets_sold integer default 0 check (vip_tickets_sold >= 0),
    image_url text,
    banner_url text,
    gallery_urls text[] default '{}',
    is_active boolean default true,
    is_featured boolean default false,
    is_sold_out boolean default false,
    is_canceled boolean default false,
    canceled_reason text,
    age_restriction integer check (age_restriction >= 0),
    dress_code text,
    special_instructions text,
    organizer text default 'Erigga Official',
    contact_email text,
    contact_phone text,
    social_links jsonb default '{}',
    tags text[] default '{}',
    category text,
    genre text,
    seo_title text,
    seo_description text,
    metadata jsonb default '{}',
    created_at timestamp with time zone default now(),
    updated_at timestamp with time zone default now()
);

-- Enhanced tickets with QR codes and validation
CREATE TABLE IF NOT EXISTS public.tickets (
    id bigint primary key generated always as identity,
    user_id bigint not null references public.users(id) on delete cascade,
    event_id bigint not null references public.events(id) on delete cascade,
    ticket_number text unique not null,
    ticket_type text default 'regular' check (ticket_type in ('regular', 'vip', 'backstage', 'meet_greet')),
    qr_code text unique not null,
    qr_code_url text,
    status ticket_status default 'pending',
    payment_reference text not null,
    amount_paid decimal(10,2) not null check (amount_paid >= 0),
    fees_paid decimal(10,2) default 0 check (fees_paid >= 0),
    total_paid decimal(10,2) not null check (total_paid >= 0),
    currency text default 'NGN',
    payment_method payment_method,
    buyer_name text not null,
    buyer_email text not null,
    buyer_phone text,
    seat_number text,
    section text,
    row_number text,
    special_access text[] default '{}',
    purchased_at timestamp with time zone default now(),
    used_at timestamp with time zone,
    validated_by bigint references public.users(id),
    validation_location text,
    transfer_count integer default 0 check (transfer_count >= 0),
    max_transfers integer default 3 check (max_transfers >= 0),
    is_transferable boolean default true,
    notes text,
    metadata jsonb default '{}',
    created_at timestamp with time zone default now(),
    updated_at timestamp with time zone default now()
);

-- Ticket transfers
CREATE TABLE IF NOT EXISTS public.ticket_transfers (
    id bigint primary key generated always as identity,
    ticket_id bigint not null references public.tickets(id) on delete cascade,
    from_user_id bigint not null references public.users(id) on delete cascade,
    to_user_id bigint not null references public.users(id) on delete cascade,
    transfer_code text unique not null,
    status text default 'pending' check (status in ('pending', 'accepted', 'rejected', 'expired')),
    expires_at timestamp with time zone not null,
    accepted_at timestamp with time zone,
    notes text,
    created_at timestamp with time zone default now()
);

-- Event check-ins for attendance tracking
CREATE TABLE IF NOT EXISTS public.event_checkins (
    id bigint primary key generated always as identity,
    event_id bigint not null references public.events(id) on delete cascade,
    ticket_id bigint not null references public.tickets(id) on delete cascade,
    user_id bigint not null references public.users(id) on delete cascade,
    checked_in_by bigint references public.users(id),
    check_in_time timestamp with time zone default now(),
    check_in_location text,
    device_info jsonb default '{}',
    metadata jsonb default '{}',
    unique(ticket_id)
);
